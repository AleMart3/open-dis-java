<?xml version="1.0"  encoding="UTF-8"?>

<!-- This is NOT used to build the open-dis-java project. The Maven pom.xml is used for that. 
     This file was for auto-generating some of the code. You should not need to run this. -->

<project name="open-dis codebase" basedir=".">
    <property name="src" location="src/main/java"/>
    
    <target name="init" description="create initial directories">
        <mkdir dir="${build}"/>
        <mkdir dir="${testReportOutputDir}"/>
        <mkdir dir="${src}/edu"/>
        <mkdir dir="${src}/edu/nps"/>
        <mkdir dir="${src}/edu/nps/moves"/>
        <mkdir dir="${src}/edu/nps/moves/dis"/>
        <mkdir dir="${src}/edu/nps/moves/dis7"/>
    </target>

    <target name="generateAllSource">
      <antcall target="generateJavaDisSourceCode"/>
      <antcall target="generateJavaDis7SourceCode"/>
    </target>    

    <!-- Generate the desktop Java code. This relies on the jar file xmlpg.jar, from a separate project.
          You must run patch after this to apply known manual fixes to the source code generated.
     
         Some source code generation properties are set in the XML file, such as the directory location.
         These may be overridden by command line options that set java system properties via
         the -D option.

         This uses git submodules to share the XML description file across language implementations.
         to pull it in, run
        
         git submodule init
         git submodule update
    --> 
    <target name="generateJavaDisSourceCode" depends="init" description = "run program to generate desktop java">
        <echo message="Be sure to bring in the git submodule for DISDescription with git submodule init; git submodule update"/>
        <property name="xmlSourceFile" value="DISDescription/DIS6.xml"/>
        <property name="xmlpg.generatedSourceDir" value="${src}"/>
        <property name="xmlpg.package" value="edu.nps.moves.dis"/>
        <property name="product" value="dis"/>
        <echo message="Generating DIS source code for java desktop"/>
        <echo message="source dir=${xmlpg.generatedSourceDir}"/>
        <antcall target="generateDisSourceCode"/>
    </target>

     <target name="generateJavaDis7SourceCode" depends="init" description = "run program to generate java for DIS 2009, desktop version">
        <echo message="Be sure to bring in the git submodule for DISDescription with git submodule init; git submodule
 update"/>
        <echo message="Generating DIS 7 desktop version"/>
        <property name="xmlSourceFile" value="DISDescription/DIS7.xml"/>
        <property name="javadir" value="${src}"/>
        <property name="xmlpg.package" value="edu.nps.moves.dis7"/>
        <property name="product" value="dis7"/>
        <property name="xmlpg.generatedSourceDir" value="${src}"/>
        <!-- apply the patches, manual changes to the code captured in the patch files -->
        <antcall target="generateDisSourceCode"/>
    </target>

    <target name="check-prerequisites-generate">
        <condition property="properties-set">
            <and>
                <isset property="xmlSourceFile"/>
                <!--isset property="javadir"/-->
            </and>
        </condition>
        <fail message="Not all prerequisite properties are defined properly!" unless="properties-set"/>
    </target>

    <target name="generateDisSourceCode" depends="init, check-prerequisites-generate" description = "run program to generate DIS source code">
        <echo message="Generating DIS source code for java"/>

        <java classname="edu.nps.moves.xmlpg.Xmlpg">
            <classpath refid="lib.path"/>
            <arg value="${xmlSourceFile}"/>
            <arg value="java"/>
            <sysproperty key="xmlpg.generatedSourceDir" value="${src}"/>
            <sysproperty key="xmlpg.package" value="${xmlpg.package}"/>
        </java>

        <!-- apply the patches, manual changes to the code captured in the patch files -->
        <antcall target="patch"/>

    </target>

    <!-- Run patch scripts on the generated code to fix various problems. This is run by the generateDisSourceCode task -->
    <target name="patch" description="patch generated source code">
        <!--exec executable="patches/applyPatches.bash"-->
         <!-- use this property for most cygwin-based windows releases -->
        <!---property name="bash" value="/cygwin/bin/bash"/-->
        
        
        <!-- Use this property for most Unix platforms -->
        <property name="bash" value="/bin/bash"/>
        <exec executable="${bash}" osfamily="unix">
            <!-- Add an extra dash in front of the login for cygwin. The other extra arguments seem to help -->
            <!--arg value="-login"/-->
            <!--arg value="-i"/-->
            <!--arg value="-c"/-->
  
            <!-- The bash script to run. this applies the patches to the source code -->
            <arg value="patches/applyPatches.bash"/>
            <arg value="${product}"/>
        </exec>
    </target>

</project>
